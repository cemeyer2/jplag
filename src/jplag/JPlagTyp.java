
package jplag;

import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.jws.soap.SOAPBinding;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.bind.annotation.adapters.HexBinaryAdapter;
import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;


/**
 * This class was generated by the JAXWS SI.
 * JAX-WS RI 2.1-02/02/2007 03:56 AM(vivekp)-FCS
 * Generated source version: 2.1
 * 
 */
@WebService(name = "JPlagTyp", targetNamespace = "http://www.ipd.uni-karlsruhe.de/jplag")
@SOAPBinding(parameterStyle = SOAPBinding.ParameterStyle.BARE)
@XmlSeeAlso({
    ObjectFactory.class
})
public interface JPlagTyp {


    /**
     * 
     * 				Returns some user account informations, the available languages
     * 				including default values for suffixes and minimum match length,
     * 				the available country languages and a list of own submissions
     * 				on the server.
     * 			
     * 
     * @return
     *     returns jplag.ServerInfo
     * @throws JplagException
     */
    @WebMethod(action = "http://www.ipd.uni-karlsruhe.de/jplag/getServerInfo")
    @WebResult(name = "ServerInfo", targetNamespace = "http://www.ipd.uni-karlsruhe.de/jplag/types", partName = "infos")
    public ServerInfo getServerInfo()
        throws JplagException
    ;

    /**
     * 
     * 				Quickchecks the parameters and adds the given submission to the
     * 				working queue. It takes an Option object and a MimeMultipart
     * 				object containing a zup file with all the files to be compared
     * 				in the structure specified by the Option object.
     * 				Returns the submission identification string.
     * 				This function is not .NET compatible!
     * 			
     * 
     * @param arguments
     * @param inputZipFile
     * @return
     *     returns java.lang.String
     * @throws JplagException
     */
    @WebMethod(action = "http://www.ipd.uni-karlsruhe.de/jplag/compareSource")
    @WebResult(name = "compareSourceResponseString", targetNamespace = "http://www.ipd.uni-karlsruhe.de/jplag/types", partName = "submissionID")
    public String compareSource(
        @WebParam(name = "eOption", targetNamespace = "http://www.ipd.uni-karlsruhe.de/jplag/types", partName = "arguments")
        Option arguments,
        @XmlJavaTypeAdapter(HexBinaryAdapter.class)
        @WebParam(name = "inputZipFile", targetNamespace = "", partName = "inputZipFile")
        byte[] inputZipFile)
        throws JplagException
    ;

    /**
     * 
     * 				Quickchecks the parameters and starts taking a submission upload
     * 				with the first 80 kB part of the zipped submission.
     * 				If the submission file size is less than or equal to 80 kB, the
     * 				submission is added to the working queue.
     * 				The part size may not be less than 80 kB, if there is more than
     * 				one part to be sent.
     * 				Returns the submission identification string
     * 			
     * 
     * @param params
     * @return
     *     returns java.lang.String
     * @throws JplagException
     */
    @WebMethod(action = "http://www.ipd.uni-karlsruhe.de/jplag/startSubmissionUpload")
    @WebResult(name = "startSubmissionUploadResponseString", targetNamespace = "http://www.ipd.uni-karlsruhe.de/jplag/types", partName = "submissionID")
    public String startSubmissionUpload(
        @WebParam(name = "startSubmissionUploadParams", targetNamespace = "http://www.ipd.uni-karlsruhe.de/jplag/types", partName = "params")
        StartSubmissionUploadParams params)
        throws JplagException
    ;

    /**
     * 
     * 				Used to send the next 80 kB part to the server. If the remaining
     * 				file size is less than or equal to 80 kB, the submission is
     * 				added to the working queue.
     * 				The part size may not be less than 80 kB, if this part is not
     * 				the last part to be sent.				
     * 			
     * 
     * @param data
     * @return
     *     returns int
     * @throws JplagException
     */
    @WebMethod(action = "http://www.ipd.uni-karlsruhe.de/jplag/continueSubmissionUpload")
    @WebResult(name = "continueSubmissionUploadDummyInt", targetNamespace = "http://www.ipd.uni-karlsruhe.de/jplag/types", partName = "dummy")
    public int continueSubmissionUpload(
        @WebParam(name = "continueSubmissionUploadData", targetNamespace = "http://www.ipd.uni-karlsruhe.de/jplag/types", partName = "data")
        byte[] data)
        throws JplagException
    ;

    /**
     * 
     * 				Returns the current state and progress of the submission
     * 				identified by the submissionID as described above
     * 			
     * 
     * @param submissionID
     * @return
     *     returns jplag.Status
     * @throws JplagException
     */
    @WebMethod(action = "http://www.ipd.uni-karlsruhe.de/jplag/getStatus")
    @WebResult(name = "Status", targetNamespace = "http://www.ipd.uni-karlsruhe.de/jplag/types", partName = "status")
    public Status getStatus(
        @WebParam(name = "getStatusRequestString", targetNamespace = "http://www.ipd.uni-karlsruhe.de/jplag/types", partName = "submissionID")
        String submissionID)
        throws JplagException
    ;

    /**
     * 
     * 				Returns the zipped HTML result files of the requested submission
     * 				in a MimeMultipart object. You have to call cancelSubmission
     * 				afterwards to delete the files from the server.
     * 				This function is not .NET compatible!
     * 			
     * 
     * @param submissionID
     * @return
     *     returns byte[]
     * @throws JplagException
     */
    @XmlJavaTypeAdapter(HexBinaryAdapter.class)
    @WebMethod(action = "http://www.ipd.uni-karlsruhe.de/jplag/getResult")
    @WebResult(name = "zippedResult", targetNamespace = "", partName = "zippedResult")
    public byte[] getResult(
        @WebParam(name = "getResultRequestString", targetNamespace = "http://www.ipd.uni-karlsruhe.de/jplag/types", partName = "submissionID")
        String submissionID)
        throws JplagException
    ;

    /**
     * 
     * 				Starts the download of the requested submission and returns the
     * 				total size of the zipped result files and its first 80 kB part.
     * 				If it is the only part of the download, the file is deleted from
     * 				the server afterwards.
     * 			
     * 
     * @param submissionID
     * @return
     *     returns jplag.StartResultDownloadData
     * @throws JplagException
     */
    @WebMethod(action = "http://www.ipd.uni-karlsruhe.de/jplag/startResultDownload")
    @WebResult(name = "startResultDownloadData", targetNamespace = "http://www.ipd.uni-karlsruhe.de/jplag/types", partName = "data")
    public StartResultDownloadData startResultDownload(
        @WebParam(name = "startResultDownloadRequestString", targetNamespace = "http://www.ipd.uni-karlsruhe.de/jplag/types", partName = "submissionID")
        String submissionID)
        throws JplagException
    ;

    /**
     * 
     * 				Returns the next 80 kB part of the current download.
     * 				If it is the last part of the download, the size might be less
     * 				than 80 kB and the file is deleted from the server.
     * 				The dummy parameter should just be zero.
     * 			
     * 
     * @param dummy
     * @return
     *     returns byte[]
     * @throws JplagException
     */
    @WebMethod(action = "http://www.ipd.uni-karlsruhe.de/jplag/continueResultDownload")
    @WebResult(name = "continueResultDownloadData", targetNamespace = "http://www.ipd.uni-karlsruhe.de/jplag/types", partName = "data")
    public byte[] continueResultDownload(
        @WebParam(name = "continueResultDownloadDummyInt", targetNamespace = "http://www.ipd.uni-karlsruhe.de/jplag/types", partName = "dummy")
        int dummy)
        throws JplagException
    ;

    /**
     * 
     * 				Cancels a submission and removes all related files from
     * 				the server
     * 			
     * 
     * @param submissionID
     * @return
     *     returns int
     * @throws JplagException
     */
    @WebMethod(action = "http://www.ipd.uni-karlsruhe.de/jplag/cancelSubmission")
    @WebResult(name = "cancelSubmissionDummyInt", targetNamespace = "http://www.ipd.uni-karlsruhe.de/jplag/types", partName = "dummy")
    public int cancelSubmission(
        @WebParam(name = "cancelSubmissionRequestString", targetNamespace = "http://www.ipd.uni-karlsruhe.de/jplag/types", partName = "submissionID")
        String submissionID)
        throws JplagException
    ;

    /**
     * 
     * 				Allows the user to change his password, update his alternative
     * 				email address and his homepage.
     * 				A null value means, that the value should remain unchanged.
     * 				An empty string removes the attribute.
     * 				The password must have at least 6 characters.
     * 			
     * 
     * @param params
     * @return
     *     returns int
     * @throws JplagException
     */
    @WebMethod(action = "http://www.ipd.uni-karlsruhe.de/jplag/updateUserInfo")
    @WebResult(name = "updateUserInfoDummyInt", targetNamespace = "http://www.ipd.uni-karlsruhe.de/jplag/types", partName = "dummy")
    public int updateUserInfo(
        @WebParam(name = "updateUserInfoParams", targetNamespace = "http://www.ipd.uni-karlsruhe.de/jplag/types", partName = "params")
        UpdateUserInfoParams params)
        throws JplagException
    ;

    /**
     * 
     * 				For JPlag and group admins only:
     * 					Returns an array of UserData elements containing all
     * 					information about the users.
     * 					The dummy parameter can be any int and will be ignored.
     * 					For JPlag admins all users are returned, for group admins
     * 					only the users they created are returned and the passwords
     * 					are empty.
     * 			
     * 
     * @param dummy
     * @return
     *     returns jplag.UserDataArray
     * @throws JplagException
     */
    @WebMethod(action = "http://www.ipd.uni-karlsruhe.de/jplag/getUserDataArray")
    @WebResult(name = "UserDataArray", targetNamespace = "http://www.ipd.uni-karlsruhe.de/jplag/types", partName = "userdataarray")
    public UserDataArray getUserDataArray(
        @WebParam(name = "getUserDataArrayDummyInt", targetNamespace = "http://www.ipd.uni-karlsruhe.de/jplag/types", partName = "dummy")
        int dummy)
        throws JplagException
    ;

    /**
     * 
     * 				For JPlag and group admins only:
     * 					Changes a single user's data.
     * 					Group admins can only change users they created and can not
     * 					change "created", "createdBy", "lastUsage" and "numOfSubs" 
     * 					(these fields become ignored, though they may not be null).
     * 					They can also change the user state only to "Normal" and
     * 					"Deactivated".
     * 					For JPlag admins, the "createdBy" field has to point to a
     * 					valid user.
     * 					If userdata.username==null: User oldUsername becomes
     * 						permamently removed from the server including
     * 						all his files.
     * 					Else if oldUsername==null: A new user userdata.username
     * 						will be generated.
     * 					Else: The user oldUsername becomes updated (including a
     * 						possible name change to userdata.username).
     * 						If the password is empty, the password field becomes
     * 						ignored.
     * 					The usernames must match the pattern "^[\\w\\@\\.]+$".
     * 			
     * 
     * @param params
     * @return
     *     returns int
     * @throws JplagException
     */
    @WebMethod(action = "http://www.ipd.uni-karlsruhe.de/jplag/setUserData")
    @WebResult(name = "setUserDataDummyInt", targetNamespace = "http://www.ipd.uni-karlsruhe.de/jplag/types", partName = "dummy")
    public int setUserData(
        @WebParam(name = "setUserDataParams", targetNamespace = "http://www.ipd.uni-karlsruhe.de/jplag/types", partName = "params")
        SetUserDataParams params)
        throws JplagException
    ;

    /**
     * 
     * 				For server page use only:
     * 					- The validateTime field will always be ignored.
     * 					- If everything but username is null, it returns, whether
     * 					  the username is OK (true) or it is already used (false).
     * 					- If everything but password is null and password is the
     * 					  email validation code sent to the user, the request
     * 					  becomes available to the AdminTool and an email is
     * 					  sent to the administrator, if the code is wrong, false is
     * 					  returned.
     * 					- If username, password, realname, email and reason is not
     * 					  null, it saves the data and sends a validation email
     * 					  to the user.
     * 					- Otherwise an exception is thrown.
     * 					The usernames must match the pattern "^[\\w\\@\\.]+$".
     * 			
     * 
     * @param params
     * @return
     *     returns boolean
     * @throws JplagException
     */
    @WebMethod(action = "http://www.ipd.uni-karlsruhe.de/jplag/requestAccount")
    @WebResult(name = "requestAccountBoolean", targetNamespace = "http://www.ipd.uni-karlsruhe.de/jplag/types", partName = "noerror")
    public boolean requestAccount(
        @WebParam(name = "eRequestData", targetNamespace = "http://www.ipd.uni-karlsruhe.de/jplag/types", partName = "params")
        RequestData params)
        throws JplagException
    ;

    /**
     * 
     * 				For administrational use only:
     * 					Returns a list of validated account requests.
     * 					If lengthOnly is true, the array elements will be empty,
     * 					but represent the number of requests waiting.
     * 			
     * 
     * @param lengthOnly
     * @return
     *     returns jplag.RequestDataArray
     * @throws JplagException
     */
    @WebMethod(action = "http://www.ipd.uni-karlsruhe.de/jplag/getAccountRequests")
    @WebResult(name = "RequestDataArray", targetNamespace = "http://www.ipd.uni-karlsruhe.de/jplag/types", partName = "requestArray")
    public RequestDataArray getAccountRequests(
        @WebParam(name = "getAccountRequestsLenOnlyBoolean", targetNamespace = "http://www.ipd.uni-karlsruhe.de/jplag/types", partName = "lengthOnly")
        boolean lengthOnly)
        throws JplagException
    ;

    /**
     * 
     * 				For administrational use only:
     * 					Accepts or dismisses the given users account request and
     * 					informs the user about it. The request corresponding to the
     * 					username becomes deleted.
     * 					An email containing the given message will be sent to the
     * 					user's primary email address. If the subject is null or
     * 					empty, no email will be sent.
     * 					- If the password is null, the request becomes dismissed.
     * 					- Otherwise the request becomes accepted.
     * 			
     * 
     * @param finishData
     * @return
     *     returns int
     * @throws JplagException
     */
    @WebMethod(action = "http://www.ipd.uni-karlsruhe.de/jplag/finishAccountRequest")
    @WebResult(name = "finishAccountRequestDummyInt", targetNamespace = "http://www.ipd.uni-karlsruhe.de/jplag/types", partName = "dummy")
    public int finishAccountRequest(
        @WebParam(name = "FinishRequestData", targetNamespace = "http://www.ipd.uni-karlsruhe.de/jplag/types", partName = "finishData")
        FinishRequestData finishData)
        throws JplagException
    ;

    /**
     * 
     * 				For server page use only:
     * 					Extends the account given by the account extending code.
     * 			
     * 
     * @param extendCode
     * @return
     *     returns int
     * @throws JplagException
     */
    @WebMethod(action = "http://www.ipd.uni-karlsruhe.de/jplag/extendAccount")
    @WebResult(name = "extendAccountDummyInt", targetNamespace = "http://www.ipd.uni-karlsruhe.de/jplag/types", partName = "dummy")
    public int extendAccount(
        @WebParam(name = "extendAccountString", targetNamespace = "http://www.ipd.uni-karlsruhe.de/jplag/types", partName = "extendCode")
        String extendCode)
        throws JplagException
    ;

    /**
     * 
     * 				For administrational use only:
     * 					Returns a list of mail templates for the given type.
     * 					Available types are:
     * 					  - 0: Accepted request mail
     * 					  - 1: Declined request mail
     * 					  - 2: Server mail templates
     * 					  - 3: Others
     * 			
     * 
     * @param type
     * @return
     *     returns jplag.MailTemplateArray
     * @throws JplagException
     */
    @WebMethod(action = "http://www.ipd.uni-karlsruhe.de/jplag/getMailTemplates")
    @WebResult(name = "MailTemplateArray", targetNamespace = "http://www.ipd.uni-karlsruhe.de/jplag/types", partName = "templateArray")
    public MailTemplateArray getMailTemplates(
        @WebParam(name = "getMailTemplatesInt", targetNamespace = "http://www.ipd.uni-karlsruhe.de/jplag/types", partName = "type")
        int type)
        throws JplagException
    ;

    /**
     * 
     * 				For administrational use only:
     * 					Sets a mail template for the given type (for available
     * 					types see getMailTemplates).
     * 					If a mail template with the same type and name already
     * 					exists, it will be overwritten. If the subject is empty,
     * 					the template will be removed. If the data is empty, the
     * 					template will be renamed from name to subject.
     * 			
     * 
     * @param params
     * @return
     *     returns int
     * @throws JplagException
     */
    @WebMethod(action = "http://www.ipd.uni-karlsruhe.de/jplag/setMailTemplate")
    @WebResult(name = "setMailTemplateDummyInt", targetNamespace = "http://www.ipd.uni-karlsruhe.de/jplag/types", partName = "dummy")
    public int setMailTemplate(
        @WebParam(name = "setMailTemplateParams", targetNamespace = "http://www.ipd.uni-karlsruhe.de/jplag/types", partName = "params")
        SetMailTemplateParams params)
        throws JplagException
    ;

    /**
     * 
     * 				For administrational use:
     * 					Sends a mail to all developers.
     * 			
     * 
     * @param params
     * @return
     *     returns int
     * @throws JplagException
     */
    @WebMethod(action = "http://www.ipd.uni-karlsruhe.de/jplag/notifyDevelopers")
    @WebResult(name = "notifyDevelopersDummyInt", targetNamespace = "http://www.ipd.uni-karlsruhe.de/jplag/types", partName = "dummy")
    public int notifyDevelopers(
        @WebParam(name = "notifyDevelopersParams", targetNamespace = "http://www.ipd.uni-karlsruhe.de/jplag/types", partName = "params")
        NotifyDevelopersParams params)
        throws JplagException
    ;

    /**
     * 
     * 				For server page use only:
     * 					Sets whether a given user should be considered as a
     * 					developer or not.
     * 			
     * 
     * @param params
     * @return
     *     returns int
     * @throws JplagException
     */
    @WebMethod(action = "http://www.ipd.uni-karlsruhe.de/jplag/setDeveloperState")
    @WebResult(name = "setDeveloperStateDummyInt", targetNamespace = "http://www.ipd.uni-karlsruhe.de/jplag/types", partName = "dummy")
    public int setDeveloperState(
        @WebParam(name = "setDeveloperStateParams", targetNamespace = "http://www.ipd.uni-karlsruhe.de/jplag/types", partName = "params")
        SetDeveloperStateParams params)
        throws JplagException
    ;

}
